
syntax = "proto3";
// edition = "2023";

package msg;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "mioty-bssci-adapter/internal/api/msg";
// option features.(pb.go).api_level = API_OPAQUE;

message EndnodeUplink {
    // Basestation EUI.
    bytes bs_eui = 1;
    // Endnode EUI.
    bytes endnode_eui = 2;
    // Metadata.
    EndnodeUplinkMetadata meta = 3;
    // Message.
    oneof message {
        // Over the air attachment
        EndnodeAttMessage att = 4;
        // Over the air detachment
        EndnodeDetMessage det = 5;
        // Uplink payload
        EndnodeUlDataMessage ulData = 6;

    }
}

message EndnodeUplinkMetadata {
    // Basestation RX time.
    google.protobuf.Timestamp rx_time = 1;
    // Duration of the reception. (Optional)
    optional google.protobuf.Duration rx_duration = 2;
    // Packet counter.
    uint32 packet_cnt = 3;
    // Profile. (Optional)
    optional string profile = 4;
    // RSSI.
    double rssi = 5;
    // SNR.
    double snr = 6;
    // AWGN equivalent reception SNR. (Optional)
    optional double eq_snr = 7;
    // Reception info for every subpacket. (Optional)
    repeated EndnodeUplinkSubpacket subpacket_info = 8;
}

message EndnodeUplinkSubpacket {
    // Subpacket signal to noise ratio in dB.
    int32 snr = 1;

    // Subpacket signal strength in dBm.
    int32 rssi = 2;

    // Subpacket frequencies in Hz.
    int32 frequency = 3;

    // Subpacket phases in degree +-180. (Optional)
    optional int32 phase = 4;
}

message EndnodeAttMessage {
    // ID of the operation
    int64 op_id = 1;

    // Attachment_cnt counter.
    uint32 attachment_cnt = 2;

    // End Point nonce, 4 bytes little endian
    uint32 nonce = 3;

    // End Point signature, 4 bytes little endian
    uint32 sign = 4;

    // End Point short address, only if assigned by the Base Station, 2 bytes little endian
    optional uint32 sh_addr = 5;

    // True if End Point uses dual channel mode
    bool dual_channel = 6;

    // True if End Point uses DL repetition
    bool repetition = 7;

    // True if End Point uses wide carrier offset
    bool wide_carr_off = 8;

    // True if End Point uses long DL interblock distance
    bool long_blk_dist = 9;
}

message EndnodeDetMessage {
    // ID of the operation
    int64 op_id = 1;
    // End Point signature , 4 bytes little endian
    uint32 sign = 2;
}

message EndnodeUlDataMessage {
    // End Point user data, might be empty
    bytes data = 1;
    // MPF header byte, 1 byte
    uint32 format = 2;
    // mioty Mode. (Optional)
    optional string mode = 3;

}
